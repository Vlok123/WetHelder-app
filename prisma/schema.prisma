// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?   // For email/password auth
  emailVerified DateTime?
  image         String?
  profession    String    @default("general")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  conversations Conversation[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Chat functionality models
model Conversation {
  id        String   @id @default(cuid())
  userId    String
  title     String   @default("Nieuwe conversatie")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]

  @@index([userId, createdAt])
}

model Message {
  id             String   @id @default(cuid())
  conversationId String
  role           String   // 'user' or 'assistant'
  content        String
  createdAt      DateTime @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId, createdAt])
}

// Legal Database Models
model LawArticle {
  id                String   @id @default(cuid())
  articleNumber     String   // e.g., "Art. 1.1"
  title             String
  content           String
  lawCode           String   // e.g., "BW", "WvSr", "WvSv"
  lawName           String   // e.g., "Burgerlijk Wetboek"
  book              String?  // For multi-book laws
  chapter           String?
  section           String?
  lastUpdated       DateTime @default(now())
  isActive          Boolean  @default(true)
  sourceUrl         String?  // Link to wetten.overheid.nl
  
  @@index([lawCode, articleNumber])
  @@index([title])
}

model Jurisprudence {
  id                String   @id @default(cuid())
  ecliNumber        String   @unique // European Case Law Identifier
  title             String
  summary           String
  fullText          String
  court             String   // e.g., "Hoge Raad", "Gerechtshof Amsterdam"
  decisionDate      DateTime
  publicationDate   DateTime?
  legalArea         String   // e.g., "Strafrecht", "Bestuursrecht"
  keywords          String   // JSON array of keywords
  relevantArticles  String?  // JSON array of related law articles
  sourceUrl         String?  // Link to rechtspraak.nl
  
  @@index([court, decisionDate])
  @@index([legalArea])
  @@index([ecliNumber])
}

model DocumentTemplate {
  id              String   @id @default(cuid())
  title           String
  description     String
  category        String   // e.g., "Contract", "Bezwaar", "Klacht"
  templateContent String   // Template with placeholders
  instructions    String   // How to use the template
  requiredFields  String   // JSON array of required fields
  legalBasis      String?  // Related law articles
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  isActive        Boolean  @default(true)
  downloadCount   Int      @default(0)
  
  @@index([category])
  @@index([title])
}

model Municipality {
  id            String   @id @default(cuid())
  name          String   @unique
  cbsCode       String   @unique // CBS municipality code
  province      String
  region        String?
  population    Int?
  area          Float?   // in kmÂ²
  isActive      Boolean  @default(true)
  
  regulations   MunicipalRegulation[]
  
  @@index([province])
  @@index([name])
}

model MunicipalRegulation {
  id              String       @id @default(cuid())
  title           String
  description     String
  content         String
  regulationType  String       // e.g., "APV", "Verordening", "Beleidsregel"
  municipalityId  String
  effectiveDate   DateTime
  expirationDate  DateTime?
  lastUpdated     DateTime     @default(now())
  isActive        Boolean      @default(true)
  sourceUrl       String?
  
  municipality    Municipality @relation(fields: [municipalityId], references: [id], onDelete: Cascade)
  
  @@index([municipalityId, regulationType])
  @@index([title])
}

model EURegulation {
  id              String   @id @default(cuid())
  regulationNumber String  @unique // e.g., "2016/679" (GDPR)
  title           String
  titleDutch      String?  // Dutch translation
  summary         String
  content         String
  regulationType  String   // e.g., "Verordening", "Richtlijn", "Besluit"
  adoptionDate    DateTime
  effectiveDate   DateTime
  implementationDeadline DateTime?
  legalBasis      String?  // Treaty articles
  keywords        String   // JSON array
  dutchImplementation String? // Reference to Dutch implementation
  sourceUrl       String?  // Link to EUR-Lex
  
  @@index([regulationType])
  @@index([effectiveDate])
  @@index([title])
} 